export default {                                                                                                           
  isStatic: false,
  isDev: true,
  isHMR: false,
  app: {
    store: Store {
    _committing: false,
      _actions: [Object],
      _actionSubscribers: [],
      _mutations: [Object],
      _wrappedGetters: [Object: null prototype] {},
      _modules: [ModuleCollection],
      _modulesNamespaceMap: [Object],
      _subscribers: [],
      _watcherVM: [Vue],
      _makeLocalGettersCache: [Object: null prototype] {},
      dispatch: [Function: boundDispatch],
      commit: [Function: boundCommit],
      strict: true,
      getters: {},
      _vm: [Vue],
      '$router': [VueRouter],
      registerModule: [Function],
      app: [Circular],
      '$icon': [Function: getIcon],
      '$auth': [Km],
      '$firebase': [Object]
    },
    router: VueRouter {
      app: [Vue],
      apps: [Array],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory]
    },
    nuxt: {
      defaultTransition: [Object],
      transitions: [Array],
      setTransitions: [Function: setTransitions],
      err: null,
      dateErr: null,
      error: [Function: error]
    },
    head: {
      titleTemplate: '%s - NuxtFire',
      title: 'NuxtFire',
      meta: [Array],
      link: [Array],
      style: [],
      script: [],
      htmlAttrs: [Object]
    },
    render: [Function: render],
    data: [Function: data],
    beforeCreate: [Function: beforeCreate],
    created: [Function: created],
    mounted: [Function: mounted],
    watch: {
      'nuxt.err': 'errorChanged'
    },
    computed: {
      isOffline: [Function: isOffline]
    },
    methods: {
      refreshOnlineStatus: [Function: refreshOnlineStatus],
      refresh: [AsyncFunction: refresh],
      errorChanged: [Function: errorChanged],
      setLayout: [Function: setLayout],
      loadLayout: [Function: loadLayout]
    },
    components: {
      NuxtLoading: [Object]
    },
    context: [Circular],
    '$icon': [Function: getIcon],
    vuetify: Vuetify {
      framework: [Object],
      installed: [Array],
      preset: [Object]
    },
    '$auth': Km {
      l: false,
      settings: [Al],
      app: [FirebaseAppImpl],
      b: [ni],
      O: [],
      m: [Array],
      J: [Array],
      Ub: [Function: bound ],
      W: null,
      Vb: [Function: bound ],
      currentUser: null,
      h: [Am],
      w: [ym],
      Y: [B],
      i: [B],
      ga: true,
      ma: [Function: bound ],
      ub: [Function: bound ],
      wa: [Function: bound ],
      xa: [Function: bound ],
      Ja: [Function: bound ],
      a: null,
      INTERNAL: [Object],
      o: 0,
      va: false,
      la: undefined,
      u: [Qc],
      Sb: [Circular],
      Xa: null,
      Z: null,
      P: null,
      I: [],
      B: null
    },
    '$firebase': {
      __esModule: true,
      initializeApp: [Function: initializeApp],
      app: [Function],
      apps: [Getter],
      SDK_VERSION: '7.5.1',
      INTERNAL: [Object],
      default: [Circular],
      auth: [Function],
      User: [Function]
    }
  },
  store: Store {
    _committing: false,
    _actions: [Object: null prototype] {
      nuxtServerInit: [Array],
      'users/login': [Array],
      'users/googleLogin': [Array],
      'users/logout': [Array]
    },
    _actionSubscribers: [],
    _mutations: [Object: null prototype] {
      setDrawer: [Array],
      toggleDrawer: [Array],
      'users/SET_USER': [Array]
    },
    _wrappedGetters: [Object: null prototype] {},
    _modules: ModuleCollection {
      root: [Module]
    },
    _modulesNamespaceMap: [Object: null prototype] {
      'users/': [Module]
    },
    _subscribers: [],
    _watcherVM: Vue {
      _uid: 0,
      _isVue: true,
      '$options': [Object],
      _renderProxy: [Vue],
      _self: [Circular],
      '$parent': undefined,
      '$root': [Circular],
      '$children': [],
      '$refs': {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype] {},
      _hasHookEvent: false,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function],
      '$createElement': [Function],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular],
      '$vuetify': [Circular],
      _watchers: [],
      _data: {}
    },
    _makeLocalGettersCache: [Object: null prototype] {},
    dispatch: [Function: boundDispatch],
    commit: [Function: boundCommit],
    strict: true,
    getters: {},
    _vm: Vue {
      _uid: 1,
      _isVue: true,
      '$options': [Object],
      _renderProxy: [Vue],
      _self: [Circular],
      '$parent': undefined,
      '$root': [Circular],
      '$children': [],
      '$refs': {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype] {},
      _hasHookEvent: false,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function],
      '$createElement': [Function],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular],
      '$vuetify': [Circular],
      _watchers: [Array],
      _data: [Object],
      _computedWatchers: [Object: null prototype] {}
    },
    '$router': VueRouter {
      app: [Vue],
      apps: [Array],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory]
    },
    registerModule: [Function],
    app: {
      store: [Circular],
      router: [VueRouter],
      nuxt: [Object],
      head: [Object],
      render: [Function: render],
      data: [Function: data],
      beforeCreate: [Function: beforeCreate],
      created: [Function: created],
      mounted: [Function: mounted],
      watch: [Object],
      computed: [Object],
      methods: [Object],
      components: [Object],
      context: [Circular],
      '$icon': [Function: getIcon],
      vuetify: [Vuetify],
      '$auth': [Km],
      '$firebase': [Object]
    },
    '$icon': [Function: getIcon],
    '$auth': Km {
      l: false,
      settings: [Al],
      app: [FirebaseAppImpl],
      b: [ni],
      O: [],
      m: [Array],
      J: [Array],
      Ub: [Function: bound ],
      W: null,
      Vb: [Function: bound ],
      currentUser: null,
      h: [Am],
      w: [ym],
      Y: [B],
      i: [B],
      ga: true,
      ma: [Function: bound ],
      ub: [Function: bound ],
      wa: [Function: bound ],
      xa: [Function: bound ],
      Ja: [Function: bound ],
      a: null,
      INTERNAL: [Object],
      o: 0,
      va: false,
      la: undefined,
      u: [Qc],
      Sb: [Circular],
      Xa: null,
      Z: null,
      P: null,
      I: [],
      B: null
    },
    '$firebase': {
      __esModule: true,
      initializeApp: [Function: initializeApp],
      app: [Function],
      apps: [Getter],
      SDK_VERSION: '7.5.1',
      INTERNAL: [Object],
      default: [Circular],
      auth: [Function],
      User: [Function]
    }
  },
  payload: undefined,
  error: [Function: bound error],
  base: '/',
  env: {
    API_KEY: 'AIzaSyCz8gCkmdI8jV-jB9_2sgH2rP1s7CyuiAY',
    NUXT_ENV_API_KEY: 'AIzaSyCz8gCkmdI8jV-jB9_2sgH2rP1s7CyuiAY'
  },
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList {
        head: null,
        tail: null,
        length: 0
      },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: true,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: true,
      decoder: null,
      encoding: null
    },
    readable: true,
    domain: null,
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 38719,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 14490,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 38720,
        [Symbol(triggerId)]: 38719
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 38719,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 14490,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 38720,
        [Symbol(triggerId)]: 38719
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      host: 'localhost:3000',
      connection: 'keep-alive',
      'upgrade-insecure-requests': '1',
      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X ' +
        '10_15_0) AppleWebKit/537.36 (KHTML, like ' +
        'Gecko) Chrome/78.0.3904.108 Safari/537.36',
      'sec-fetch-user': '?1',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
      'sec-fetch-site': 'none',
      'sec-fetch-mode': 'navigate',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en-US,en;q=0.9,ru;q=0.8,la;q=0.7',
      cookie: 'tlh_qry_string=; io=lWiUV3GDPujdEyffAAAJ',
      'if-none-match': '"9259b-OZ10NPLt5XKuKLVOQxriTnK93VQ"'
    },
    rawHeaders: [
      'Host',
      'localhost:3000',
      'Connection',
      'keep-alive',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X ' +
        '10_15_0) AppleWebKit/537.36 (KHTML, like ' +
        'Gecko) Chrome/78.0.3904.108 Safari/537.36',
      'Sec-Fetch-User',
      '?1',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
      'Sec-Fetch-Site',
      'none',
      'Sec-Fetch-Mode',
      'navigate',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'en-US,en;q=0.9,ru;q=0.8,la;q=0.7',
      'Cookie',
      'tlh_qry_string=; io=lWiUV3GDPujdEyffAAAJ',
      'If-None-Match',
      '"9259b-OZ10NPLt5XKuKLVOQxriTnK93VQ"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      [Symbol(asyncId)]: 38719,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 14490,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 38720,
        [Symbol(triggerId)]: 38719
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    originalUrl: '/',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/'
    },
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/'
    }
  },
  res: ServerResponse {
    domain: null,
    _events: [Object: null prototype] {
      finish: [Function: bound resOnFinish]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    output: [],
    outputEncodings: [],
    outputCallbacks: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 38719,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 14490,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 38720,
        [Symbol(triggerId)]: 38719
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _handle: [TCP],
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketOnWrap],
      _paused: false,
      _peername: [Object],
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 38719,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 14490,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 38720,
        [Symbol(triggerId)]: 38719
      },
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    locals: {},
    statusCode: 200,
    [Symbol(isCorked)]: false,
    [Symbol(outHeadersKey)]: null
  },
  ssrContext: {
    req: IncomingMessage {
      _readableState: [ReadableState],
      readable: true,
      domain: null,
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      originalUrl: '/',
      _parsedUrl: [Url],
      _parsedOriginalUrl: [Url]
    },
    res: ServerResponse {
      domain: null,
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Socket],
      connection: [Socket],
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData],
      _sent100: false,
      _expect_continue: false,
      locals: {},
      statusCode: 200,
      [Symbol(isCorked)]: false,
      [Symbol(outHeadersKey)]: null
    },
    url: '/',
    spa: undefined,
    modern: false,
    _registeredComponents: Set {},
    styles: [Getter],
    _renderStyles: [Function: renderStyles],
    _styles: {
      '5c670272:0': [Object],
      '4633106e:0': [Object]
    },
    redirected: false,
    next: [Function],
    beforeRenderFns: [],
    nuxt: {
      layout: 'default',
      data: [],
      error: null,
      state: null,
      serverRendered: true
    },
    meta: {
      getOptions: [Function: getOptions$1],
      setOptions: [Function: setOptions],
      refresh: [Function: refresh$1],
      inject: [Function: inject$1],
      pause: [Function: pause$1],
      resume: [Function: resume$1],
      addApp: [Function: addApp$1]
    },
    asyncData: {}
  },
  redirect: [Function],
  beforeNuxtRender: [Function],
  route: {
    name: 'index',
    meta: [
      {}
    ],
    path: '/',
    hash: '',
    query: {},
    params: {},
    fullPath: '/',
    matched: [
      [Object]
    ]
  },
  next: [Function],
  _redirected: false,
  _errored: false,
  params: {},
  query: {},
  '$vuetify': {
    application: Application {
      framework: [Circular],
      bar: 0,
      top: 0,
      left: 0,
      insetFooter: 0,
      right: 0,
      bottom: 0,
      footer: 0,
      application: [Object]
    },
    breakpoint: Breakpoint {
      framework: [Circular],
      xs: false,
      sm: false,
      md: false,
      lg: false,
      xl: false,
      xsOnly: false,
      smOnly: false,
      smAndDown: false,
      smAndUp: false,
      mdOnly: false,
      mdAndDown: false,
      mdAndUp: false,
      lgOnly: false,
      lgAndDown: false,
      lgAndUp: false,
      xlOnly: false,
      name: '',
      height: 0,
      width: 0,
      thresholds: [Object],
      scrollBarWidth: 16,
      resizeTimeout: 0
    },
    goTo: [Function: goTo] {
      framework: [Circular],
      init: [Function]
    },
    icons: Icons {
      framework: [Circular],
      iconfont: 'mdi',
      values: [Object]
    },
    lang: Lang {
      framework: [Circular],
      current: 'en',
      locales: [Object],
      translator: undefined
    },
    theme: Theme {
      framework: [Circular],
      disabled: false,
      themes: [Object],
      defaults: [Object],
      isDark: true,
      vueInstance: null,
      vueMeta: [Object],
      options: undefined
    },
    rtl: false
  },
  auth: Km {
    l: false,
    settings: Al {
      vb: false
    },
    app: FirebaseAppImpl {
      firebase_: [Object],
      isDeleted_: false,
      name_: '[DEFAULT]',
      automaticDataCollectionEnabled_: false,
      options_: [Object],
      container: [ComponentContainer]
    },
    b: ni {
      c: 'AIzaSyCz8gCkmdI8jV-jB9_2sgH2rP1s7CyuiAY',
      l: 'https://securetoken.googleapis.com/v1/token',
      u: [Pe],
      g: [Object],
      h: 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/',
      i: [Pe],
      a: [Object],
      f: [mi],
      b: null
    },
    O: [],
    m: [
      [Function]
    ],
    J: [
      [Function]
    ],
    Ub: [Function: bound ],
    W: null,
    Vb: [Function: bound ],
    currentUser: null,
    h: Am {
      a: 'AIzaSyCz8gCkmdI8jV-jB9_2sgH2rP1s7CyuiAY:[DEFAULT]',
      b: [pk],
      c: [Object],
      f: [B]
    },
    w: ym {
      a: 'AIzaSyCz8gCkmdI8jV-jB9_2sgH2rP1s7CyuiAY:[DEFAULT]',
      b: [pk]
    },
    Y: B {
      a: 2,
      i: undefined,
      c: null,
      b: null,
      f: null,
      h: false,
      g: false
    },
    i: B {
      a: 2,
      i: undefined,
      c: null,
      b: null,
      f: null,
      h: false,
      g: false
    },
    ga: true,
    ma: [Function: bound ],
    ub: [Function: bound ],
    wa: [Function: bound ],
    xa: [Function: bound ],
    Ja: [Function: bound ],
    a: null,
    INTERNAL: {
      delete: [Function: bound ],
      logFramework: [Function: bound ]
    },
    o: 0,
    va: false,
    la: undefined,
    u: Qc {
      src: [Circular],
      a: {},
      b: 0
    },
    Sb: [Circular],
    Xa: null,
    Z: null,
    P: null,
    I: [],
    B: null
  },
  firebase: {
    __esModule: true,
    initializeApp: [Function: initializeApp],
    app: [Function: app] {
      App: [Function: FirebaseAppImpl]
    },
    apps: [Getter],
    SDK_VERSION: '7.5.1',
    INTERNAL: {
      registerComponent: [Function: registerComponent],
      removeApp: [Function: removeApp],
      components: [Map],
      useAsService: [Function: useAsService],
      createFirebaseNamespace: [Function: createFirebaseNamespace],
      extendNamespace: [Function: extendNamespace],
      createSubscribe: [Function: createSubscribe],
      ErrorFactory: [Function: ErrorFactory],
      deepExtend: [Function: deepExtend],
      node: [Object]
    },
    default: [Circular],
    auth: [Function: serviceNamespace] {
      ActionCodeInfo: [Object],
      Auth: [Function],
      AuthCredential: [Function],
      Error: [Function],
      EmailAuthProvider: [Function],
      FacebookAuthProvider: [Function],
      GithubAuthProvider: [Function],
      GoogleAuthProvider: [Function],
      TwitterAuthProvider: [Function],
      OAuthProvider: [Function],
      SAMLAuthProvider: [Function],
      PhoneAuthProvider: [Function],
      RecaptchaVerifier: [Function],
      ActionCodeURL: [Function]
    },
    User: [Function: Q] {
      qb: [G],
      gd: [Function]
    }
  }
}
